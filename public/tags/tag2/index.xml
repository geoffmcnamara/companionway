<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tag2 on companionway</title>
    <link>/tags/tag2/</link>
    <description>Recent content in Tag2 on companionway</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - companionway - 2016</copyright>
    <lastBuildDate>Thu, 15 Dec 2016 16:36:42 -0500</lastBuildDate>
    <atom:link href="/tags/tag2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>sometimes it is the obvious</title>
      <link>/post/post-title/</link>
      <pubDate>Thu, 15 Dec 2016 16:36:42 -0500</pubDate>
      
      <guid>/post/post-title/</guid>
      <description>&lt;p&gt;This was one of those &amp;ldquo;problems&amp;rdquo; that nagged me for many hours until the obvious dawned on me.
I wrote a pythone script to grab the temperature and humidiy from a DHT22 sensor and then write the
output with the proper syntax to send to my monitoring program [xymon]. The wrapper bash script ran
every 5 minutes and used a redirection to write out a file ie:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/5 * * * * /usr/local/bin/temphum.sh &amp;gt;/tmp/temphum.dat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The wrapper script grabs output and sends it to the server. Having this wrapper script lets me run the
python script independantly for testing or for curiousity.&lt;/p&gt;

&lt;p&gt;It all worked fine but sometimes the temp would jump in one direction or another for brief period and that
skewed the graphed - it was ugly so I decided to fix it.&lt;/p&gt;

&lt;p&gt;I added code to the python script to look at the temperature that got recorded on the last run into the /tmp/temphum.dat
file and then judged if the measured temperature greater or less than the &amp;ldquo;last&amp;rdquo; temp by a amount greater than a &amp;ldquo;trigger&amp;rdquo; amount (I orignally set the trigger to be a full degree, that is 1.0). If the difference between the last and the measured temp was greater
than the &amp;ldquo;trigger&amp;rdquo; then I adjusted the measured temp up or down appropriately by and adjustment amount (0.2). This would smooth
out the graph and with the readings being taken each 5 minutes everything would work out fine over time.&lt;/p&gt;

&lt;p&gt;It all worked fine each time I ran it from the command line. But when the the temperature recorded into the /tmp/temphum.dat
file was always the measured temp. The adjusted temperature never made it into the file unless I ran it from the command line.
I assumed the problem was with the environment - this is a natural assumption given that when a cron job runs it inherits no
environment settings. I adapated the python script to have its own environment PATH and I also changed the bash wrapper script
to preset it&amp;rsquo;s own PATH settings. But all to no avail.&lt;/p&gt;

&lt;p&gt;Then I realized the problem. As soon as the wrapper script runs, it opens a redirection out to &amp;gt;/tmp/temphum.dat. That is also the
file that the python script reads but as soon as the redirection starts it &amp;ldquo;zeros out&amp;rdquo; the file - it builds an empty file. Now the
python script has no &amp;ldquo;last&amp;rdquo; temperature to read and my script rightfully drops a null last temperature reading and therefore does no adjusting.&lt;/p&gt;

&lt;p&gt;The solution was to drop the redirection from the cron entry and have the python script first open the /tmp/temphum.dat file for reading the last temperature, close the file, do the adjustment calculation, then re-open the file for &amp;ldquo;w&amp;rdquo;rite which empties the file for writing new content, then write the needed message lines to the file, and then close the file.&lt;/p&gt;

&lt;p&gt;All is good now. So easy to overlook the simple/obvious show stopper.&lt;/p&gt;

&lt;p&gt;Enjoy
-g-&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>alway use visudo</title>
      <link>/post/post-title/</link>
      <pubDate>Wed, 14 Dec 2016 10:59:38 -0500</pubDate>
      
      <guid>/post/post-title/</guid>
      <description>&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Familiarity breeds contempt&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;I get very comfortable with using the vim editor (take cover&amp;hellip; flame way ensuing) so
comfortable that using any other editor leaves me just a bit unnerved. I constantly use it
to update sudoers. The best way to modify sudoers is to add a supplimental inclusion file under
/etc/sudoers.d/whatevername - so the other day I needed to add an entry to allow the user for my
simple monitoring program (xymon) to be able to run &amp;ldquo;sudo ufw status&amp;rdquo; without a password and report
back to the monitor server.&lt;/p&gt;

&lt;p&gt;I fired up &lt;code&gt;sudo vim /etc/sudoers.d/xymon&lt;/code&gt; and started to add the needed line:
&lt;code&gt;xymon ALL = NOPASSWD: /usr/sbin/ufw status&lt;/code&gt; but I got halfway through and could remember the exact location&lt;/p&gt;

&lt;p&gt;of the ufw binary file.. so I saved got out and I just sawed off the limb I  was standing on. Sudo is not totally broken so I had togo to the phsical machine (which happened to be a raspberry pi) hook up a monitor and keyboard and fix it by logging in as root and finish editing the sudoers supplimental file correctly. I did it the proper way this time; I used visudo which protects you from yourself.&lt;/p&gt;

&lt;p&gt;Lesson: &lt;em&gt;Always use visudo&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By the way, to change the default editor from nano to vim for visudo (on unbuntu at least) you can run:
&lt;code&gt;sudo update-alternatives --config editor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On my systems that exchange looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo update-alternatives --config editor
There are 4 choices for the alternative editor (providing /usr/bin/editor).

  Selection    Path                Priority   Status
------------------------------------------------------------
* 0            /bin/nano            40        auto mode
  1            /bin/ed             -100       manual mode
  2            /bin/nano            40        manual mode
  3            /usr/bin/vim.basic   30        manual mode
  4            /usr/bin/vim.tiny    10        manual mode

Press &amp;lt;enter&amp;gt; to keep the current choice[*], or type selection number: 3
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/editor (editor) in manual mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy
-g-&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>recursive replace text</title>
      <link>/post/post-title/</link>
      <pubDate>Sat, 10 Dec 2016 20:38:12 -0500</pubDate>
      
      <guid>/post/post-title/</guid>
      <description>&lt;p&gt;Recently I had to do a find and replace text on multiple files recursively. I had to look up how to do it to remind myself of the exact syntax. If I had to look it up, you have to suffer seeing it in my blog post&amp;hellip; &lt;smile&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find ./ -name \*.md -print0 | xargs -0 sed -i &#39;s/header-img/img/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful here. I used the -0 option to deal with any filename that have spaces in the name BUT it really requires that the find command contain the -print0 option otherwise things will not operate in the manner expected.&lt;/p&gt;

&lt;p&gt;Enjoy
-g-&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switched to Hugo</title>
      <link>/post/post-title/</link>
      <pubDate>Fri, 09 Dec 2016 10:57:45 -0500</pubDate>
      
      <guid>/post/post-title/</guid>
      <description>&lt;p&gt;I am swtiching from jekyll to hugo for flat file for a Content Managment System (CMS).&lt;/p&gt;

&lt;p&gt;Here is why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It comes as a binary file that runs on pretty much any platform. A single file&amp;hellip; without a list of dependencies&lt;/li&gt;
&lt;li&gt;I could stop with the last reason and it would be enough&amp;hellip; but I have to say that the file tree used in hugo is simple, and simple is beautiful. As Einstein once said:
&amp;gt;“Make things as simple as possible, but not simpler.”&lt;/li&gt;
&lt;li&gt;It is written in googles go language&amp;hellip; so it is fast and portable.&lt;/li&gt;
&lt;li&gt;It is closely tied to git so it can easily be used on github and for version maintence.&lt;/li&gt;
&lt;li&gt;it builds a clean directory [./public/] for the full site deploy and this can be rsync&amp;rsquo;d to where ever you like.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No frustrating&lt;/em&gt; version incompatiblities (or at least very minimal) - unlike jekyll which seemed to break on me every few months.&lt;/li&gt;
&lt;li&gt;hugo is relatively mature and has a huge developer backing.&lt;/li&gt;
&lt;li&gt;configurable and changed without challenges&lt;/li&gt;
&lt;li&gt;lots of themes to choose from&lt;/li&gt;
&lt;li&gt;as the Hugo websites states - it makes the web fun again&amp;hellip;&lt;/li&gt;
&lt;li&gt;Did I mention that it is a single executable file?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference:
&lt;a href=&#34;https://gohugo.io/#intro&#34;&gt;gohugo.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy
-g-&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>