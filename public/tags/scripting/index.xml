<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting on companionway</title>
    <link>/tags/scripting/</link>
    <description>Recent content in Scripting on companionway</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - companionway - 2016</copyright>
    <lastBuildDate>Thu, 15 Dec 2016 16:36:42 -0500</lastBuildDate>
    <atom:link href="/tags/scripting/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sometimes It Is The Obvious</title>
      <link>/post/sometimes-it-is-the-obvious/</link>
      <pubDate>Thu, 15 Dec 2016 16:36:42 -0500</pubDate>
      
      <guid>/post/sometimes-it-is-the-obvious/</guid>
      <description>&lt;p&gt;This was one of those &amp;ldquo;problems&amp;rdquo; that nagged me for many hours until the obvious dawned on me.
I wrote a python script to grab the temperature and humidiy from a DHT22 sensor and then write the
output with the proper syntax to send to my monitoring program [xymon]. The wrapper bash script ran
every 5 minutes and used a redirection to write out a file ie:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/5 * * * * /usr/local/bin/temphum.sh &amp;gt;/tmp/temphum.dat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The wrapper script grabs output and sends it to the server. Having this wrapper script lets me run the
python script independantly for testing or for curiousity.&lt;/p&gt;

&lt;p&gt;It all worked fine but sometimes the temp would jump in one direction or another for brief period and that
skewed the graphed - it was ugly so I decided to fix it.&lt;/p&gt;

&lt;p&gt;I added code to the python script to look at the temperature that got recorded on the last run into the /tmp/temphum.dat
file and then judged if the measured temperature greater or less than the &amp;ldquo;last&amp;rdquo; temp by a amount greater than a &amp;ldquo;trigger&amp;rdquo; amount (I orignally set the trigger to be a full degree, that is 1.0). If the difference between the last and the measured temp was greater
than the &amp;ldquo;trigger&amp;rdquo; then I adjusted the measured temp up or down appropriately by and adjustment amount (0.2). This would smooth
out the graph and with the readings being taken each 5 minutes everything would work out fine over time.&lt;/p&gt;

&lt;p&gt;It all worked fine each time I ran it from the command line. But when the the temperature recorded into the /tmp/temphum.dat
file was always the measured temp. The adjusted temperature never made it into the file unless I ran it from the command line.
I assumed the problem was with the environment - this is a natural assumption given that when a cron job runs it inherits no
environment settings. I adapated the python script to have its own environment PATH and I also changed the bash wrapper script
to preset it&amp;rsquo;s own PATH settings. But all to no avail.&lt;/p&gt;

&lt;p&gt;Then I realized the problem. As soon as the wrapper script runs, it opens a redirection out to &amp;gt;/tmp/temphum.dat. That is also the
file that the python script reads but as soon as the redirection starts it &amp;ldquo;zeros out&amp;rdquo; the file - it builds an empty file. Now the
python script has no &amp;ldquo;last&amp;rdquo; temperature to read and my script rightfully drops a null last temperature reading and therefore does no adjusting.&lt;/p&gt;

&lt;p&gt;The solution was to drop the redirection from the cron entry and have the python script first open the /tmp/temphum.dat file for reading the last temperature, close the file, do the adjustment calculation, then re-open the file for &amp;ldquo;w&amp;rdquo;rite which empties the file for writing new content, then write the needed message lines to the file, and then close the file.&lt;/p&gt;

&lt;p&gt;All is good now. So easy to overlook the simple/obvious show stopper.&lt;/p&gt;

&lt;p&gt;Enjoy
-g-&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>shell/bash uppercase arguments</title>
      <link>/post/2015-05-11-post1/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-05-11-post1/</guid>
      <description>&lt;p&gt;To make a long story short&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
PATTERN=$(echo $1 | tr [:lower:] [:upper:])
# or
PATTERN=$(echo $1 | tr [a-z] [A-Z])
# or
PATTERN=$(echo $1 | awk &#39;{print toupper($0)}&#39;)

echo &amp;quot;Your \$1 argument is now uppercase: $1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make a short story long&amp;hellip;&lt;/p&gt;

&lt;p&gt;Just to let you know a little more about me and reveal
a few more shells tricks along the way.&lt;/p&gt;

&lt;p&gt;I am a very conservative investor - always have been but
the low interest rates over the recent past has forced me
to try a squeeze a little more out of the stock market also
known as a &amp;ldquo;a gentleman&amp;rsquo;s gambling parlor of greedy people&amp;rdquo;.
To do this I have been using covered secure puts and covered calls (did
I mention that I am conservative?). So what does this have to
do with the title here?&lt;/p&gt;

&lt;p&gt;I heavily use scripting to quickly determine current positions
on stocks I track. It starts with a file listing details of
those stocks on each line. Then run a script that will selectively
get the current price on each of stock and calculate how close
it is to my target option price. I am lazy - which is one indispensable
trait of a good system admin or programmer (never do anything manually
more than once). So I needed a way to get stock quotes on
one of the stocks in my list. The obvious solution is to grab the stock
out of the list using grep (or awk) but all the stocks need to
be uppercase. I scrape the current price off of a financial site but it
requires uppercase.&lt;/p&gt;

&lt;p&gt;I mention all this because my underlying motive is to encourage people
to leverage shell tools (principally grep and awk). Fact is,
financial incentives work (maybe that is a sad thing).&lt;/p&gt;

&lt;p&gt;By the way, my script will use command line arguments to give me
a detailed single line output of selected stocks providing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;current price, difference from target and %difference from target&lt;/li&gt;
&lt;li&gt;target price and recent price, IV (implied volatility), and probability of out of the money&lt;/li&gt;
&lt;li&gt;how many lots to offer as Puts or Calls for the selected account&lt;/li&gt;
&lt;li&gt;purchase price if I bought in the past&lt;/li&gt;
&lt;li&gt;PE and future PE, ROE, various ratings, and 52 week range&lt;/li&gt;
&lt;li&gt;shares owned,percent of account(s), and any notes on the stock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lots of this is manually maintained and, yes, it can be tedious but I have the
time. The script grabs only what I tell it through the command line (just puts or calls
or selected stocks or all of them etc). Then it grabs the current price and tells me
how close it is to my target price as a percentage. For example I can tell the
script to just grab potential puts that are within X% (eg 6%) of its strike or target price.&lt;/p&gt;

&lt;p&gt;This gives me a good starting point for doing further research on selected stocks
for the day. For example this will give me all put options that interest me where
the current price is within 6% of my target.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get stocks with interesting put options, mark anything with 6% of the target/strike price
# and grep out those marked stocks only
getquotes.sh -p -m 6 -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t bore you with anymore detail - besides anything after this gets pretty cryptic&amp;hellip;&lt;/p&gt;

&lt;p&gt;Enjoy&lt;/p&gt;

&lt;p&gt;-g-&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>